<?php defined('BASEPATH') OR exit('No direct script access allowed');

/*
 * Controller for handling frameworkpdt module
 * @author : Doni Setio Pambudi (donisp06@gmail.com)
 */
class Pdt extends CI_Controller {

	/*
	 * constructor class
	 */
	public function __construct() {
		parent::__construct();

		//set module, enable for authentication
		//$this->auth->set_default_module('pelacakanpdt');
		//$this->auth->validate(true);

		//load this page model
		$this->load->model('m_publikasi_dosen');
		$this->load->model('m_pegawai');
		$this->load->model('m_pdt_pegawai');
		$this->load->model('m_pdt');
		//load foregin lang if exist
		//load foregin lang if exist
		$this->lang->load('module/publikasi_dosen');

		//load lang, place this module after foreign lang, so module_ not overriden by foreign lang
		$this->lang->load('module/log_sinkron');

		//load lang, place this module after foreign lang, so module_ not overriden by foreign lang
		
  	}

	/*
	 * method index controller pelacakanpdt
     * generated by Doni's Framework Generator
	 *
	 * this method act as module entry point
	 *
	 * @author: Doni Setio Pambudi
	 * @access: public
	 * @return: no return, view a page
	 */
	public function index(){
		$data_all = $this->m_pdt->get_data_full();


		//echo var_dump($pst_all);
	}

	public function log_clean(){
		//$this->auth->set_access('view');
		$this->auth->validate(TRUE, TRUE);

		//set informasi halaman
		$this->site_info->set_page_title('Log Bersihkan PDT');
		//set breadcrumb
		$this->site_info->add_breadcrumb('Log Bersihkan PDT');
		//add menu highlight
		$this->site_info->set_current_module('log_pdt');
		$this->site_info->set_current_submodule('log_clean');

		//add masterpage script
		$this->asset_library->add_masterpage_script();
		//add page javascript
		$this->asset_library->add_js('js/pages/pdt.js');

		$data = array();
		//load view
		$this->load->view('base/header');
		$this->load->view('log_sinkron/pdt', $data);
		$this->load->view('base/footer');
	}

	public function get_datamaster(){
		//only ajax is allowed
		if(!$this->input->is_ajax_request()) show_404();

		//$this->auth->set_access('view');
		//$this->auth->validate();

		$filter_cols = array();
		//$add_where = '';
		//set default where query
		$where = build_masterpage_filter($filter_cols /*, $add_where */);

		//get data
		$this->m_pdt->get_datatable($where);
	}

	public function clean_data($jur_id = 0)
	{
		//$jurusan = $this->input->post("filter_jurusan");
		$threshold = setting_load('threshold');
		
		if($jur_id != 0){
			$data_all = $this->m_pdt->get_data_full("( status_clean != 1 OR status_clean IS NULL ) AND kode_jurusan ='".$jur_id."'","tran_publikasi_dosen_tetap.id_bkd");
			//var_dump($data_all);
		}
		else{
			$autosync = setting_load('autosyncpdt_cb');
			if($autosync == 0) return false;
			$data_all = $this->m_pdt->get_data_full("( status_clean != 1 OR status_clean IS NULL )","tran_publikasi_dosen_tetap.id_bkd",100);
		}
		//echo count($data_all);
		foreach ($data_all as $key_data => $data) {
			if($data->status_clean !=1 ){
				foreach ($data_all as $key_cek=>$cek) {
					if($key_cek != $key_data && $cek->status_clean != 1 ){
						$lev = count_similarity($data->judul, $cek->judul);
						if($lev >= $threshold){
							$this->m_pdt->set_duplicate($cek->kode, $data->kode, $lev);
							$this->m_pdt->merge($data,$cek);
							$this->m_pdt->set_clean($cek->kode, 1);
							$cek->status_clean = 1;
						}
					}
				}
				$this->m_pdt->set_clean($data->kode, 1);
				$data->status_clean = 1;
				//break;
			}
			
		}
		$this->load->model("m_log_admin");
		if($jur_id != 0){
			$this->load->model("m_jurusan");
			$jurusan = $this->m_jurusan->get_by_column($jur_id."");
			$this->m_log_admin->insert($this->auth->get_user_id(), now(), 'Bersihkan Publikasi PDT',$jurusan->jur_nama_indonesia.'');
		}
		else{
			$this->m_log_admin->insert(USER_SYSTEM, now(), 'Bersihkan Publikasi PDT','Otomatis 100 Data');
		}
		ajax_response('ok');
		
	}
	public function merge_pelacakan($jur_id = 0){
		
		$this->load->model('m_log_sinkron');

		$threshold = setting_load('threshold');
		$threshold_cek = setting_load('threshold_cek');

		if($jur_id != 0){
			$data_pdt = $this->m_pdt->get_data_full("kode_jurusan ='".$jur_id."'", "status_clean desc");
			$data_pelacakan = $this->m_publikasi_dosen->get_data_full("pub_status_tarik = 1 AND ( pub_tahun IS NOT NULL OR pub_tahun != 0 ) AND ( pub_sinkron != 1 OR pub_sinkron IS NULL ) AND peg_jurusan = '".$jur_id."'",false,100);
		}
		else{
			$autosync = setting_load('autosyncpdt_cb');
			if($autosync == 0) return false;
			$data_pdt = $this->m_pdt->get_data_full();
			$data_pelacakan = $this->m_publikasi_dosen->get("pub_status_tarik = 1 AND ( pub_tahun IS NOT NULL OR pub_tahun != 0 ) AND (pub_sinkron != 1 OR pub_sinkron IS NULL )", false, 100/* AND pub_tahun*/);
		}
		
		$status = 0;
		foreach ($data_pelacakan as $pelacakan) {
			$min = -1;
			$min_pdt = NULL;
			foreach ($data_pdt as $pdt) {
				
				$lev = count_similarity($pelacakan->pub_judul, $pdt->judul);
				if($lev >= $min){
					$min = $lev;
					$min_pdt = $pdt;
				}
			}
			$this->load->model('m_pdt_anggota');
			$this->load->model('m_anggota');
			if($min >= $threshold){
				//merge red, merge
				

				$this->m_pdt->merge_pelacakan($min_pdt, $pelacakan);
				$this->m_log_sinkron->insert($pelacakan->pub_id, now(), 'Update Data', $min_pdt->kode, $min, 1);
				$pdt_anggota = $this->m_pdt_anggota->get_data("kode_publikasi_dosen_tetap = ".$min_pdt->kode);
				$anggota = $this->m_anggota->get("ang_publikasi = ".$pelacakan->pub_id);

				foreach ($anggota as $ang) {
					# code...
					$is_exist = FALSE;
					foreach ($pdt_anggota as $pdt_ang) {
						# code...
						if($ang->ang_pegawai == $pdt_ang->kode_pegawai){
							$is_exist = TRUE;
							break;
						}
					}
					if($is_exist){
						$this->m_pdt_anggota->insert($min_pdt->kode, $ang->ang_pegawai, $ang->ang_sebagai == 1 ? 1 : 0, false, $ang->ang_sebagai, now(), now());
					}
				}
			}
			else if ($min > $threshold_cek){
				//merge yellow, confirm
				$status = 2;
				$this->m_log_sinkron->insert($pelacakan->pub_id, now(), 'Verifikasi Data', $min_pdt->kode, $min, 2);
			}
			else{
				//merge green, insert
				$pub_id = $this->m_pdt->insert($pelacakan->dkp_kode, $pelacakan->pub_tahun,  $pelacakan->pub_bulan,
					 $pelacakan->pub_judul,  $pelacakan->pub_kata_kunci,  $pelacakan->pub_total_waktu,  $pelacakan->pub_lokasi,  $pelacakan->pub_abstraksi,
					  $pelacakan->pub_pengarang,  $pelacakan->pub_keterangan,  $pelacakan->pub_tanggal_mulai,  $pelacakan->pub_tanggal_selesai,  
					  $pelacakan->pub_created_at, $pelacakan->pub_updated_at);
				$this->m_log_sinkron->insert($pelacakan->pub_id, now(), 'Insert Data', $min_pdt->kode, $min, 3);

				$anggota = $this->m_anggota->get("ang_publikasi = ".$pelacakan->pub_id);

				foreach ($anggota as $ang) {
					# code...
					$this->m_pdt_anggota->insert($pub_id, $ang->ang_pegawai, $ang->ang_sebagai == 1 ? 1 : 0, false, $ang->ang_sebagai, now(), now());
					
				}
			}

			$this->m_publikasi_dosen->set_sinkron($pelacakan->pub_id, 1);
			$this->m_pdt->set_sinkron($min_pdt->kode, 1);
			//echo $min_pdt->judul." ". $pelacakan->pub_judul." ".$status;
			
		}
		$this->load->model("m_log_admin");
		if($jur_id != 0){
			$this->load->model("m_jurusan");
			$jurusan = $this->m_jurusan->get_by_column($jur_id."");
			$this->m_log_admin->insert($this->auth->get_user_id(), now(), 'Sinkronisasi Publikasi PDT', $jurusan->jur_nama_indonesia);
			
		}
		else{
			$this->m_log_admin->insert(USER_SYSTEM, now(), 'Sinkronisasi Publikasi PDT','Otomatis 100 Data');
		}

		
		ajax_response('ok');
	}
	public function insert_data(/*$pelacakan_id, $pdt_id*/){
		$this->load->model('m_log_sinkron');
		$this->load->model('m_pdt_anggota');
		$this->load->model('m_anggota');
		
		$pelacakan_id = $this->input->post("pub_id");
		$pdt_id = $this->input->post("snk_pdt");

		$pdt = $this->m_pdt->get_data_full('kode = '.$pdt_id);
		$pelacakan = $this->m_publikasi_dosen->get_by_column($pelacakan_id);

		$pub_id = $this->m_pdt->insert($pelacakan->dkp_kode, $pelacakan->pub_tahun,  $pelacakan->pub_bulan,
					 $pelacakan->pub_judul,  $pelacakan->pub_kata_kunci,  $pelacakan->pub_total_waktu,  $pelacakan->pub_lokasi,  $pelacakan->pub_abstraksi,
					  $pelacakan->pub_pengarang,  $pelacakan->pub_keterangan,  $pelacakan->pub_tanggal_mulai,  $pelacakan->pub_tanggal_selesai,  
					  $pelacakan->pub_created_at, $pelacakan->pub_updated_at);
		$this->m_log_sinkron->insert($pelacakan->pub_id, now(), 'Insert Data', $pdt->kode, $min, 3);

		$anggota = $this->m_anggota->get("ang_publikasi = ".$pelacakan->pub_id);

		foreach ($anggota as $ang) {
			# code...
			$this->m_pdt_anggota->insert($pub_id, $ang->ang_pegawai, $ang->ang_sebagai == 1 ? 1 : 0, false, $ang->ang_sebagai, now(), now());
			
		}

		$this->load->model("m_log_admin");
		$this->m_log_admin->insert($this->auth->get_user_id(), now(), 'Verifikasi (Insert) Data PDT',$pelacakan->judul);

		//ajax_response('ok');

	}
	public function update_data(/*$pelacakan_id, $pdt_id*/){
		$this->load->model('m_log_sinkron');
		
		$pelacakan_id = $this->input->post("pub_id");
		$pdt_id = $this->input->post("snk_pdt");

		$pdt = $this->m_pdt->get_data_full('kode = '.$pdt_id);
		$pelacakan = $this->m_publikasi_dosen->get_by_column($pelacakan_id);
		$this->m_pdt->merge_pelacakan($pdt, $pelacakan);
		$this->m_log_sinkron->insert($pelacakan->pub_id, now(), 'Update Data', $pdt->kode, $min, 1);

		$pdt_anggota = $this->m_pdt_anggota->get_data("kode_publikasi_dosen_tetap = ".$pdt->kode);
		$anggota = $this->m_anggota->get("ang_publikasi = ".$pelacakan->pub_id);

		foreach ($anggota as $ang) {
			# code...
			$is_exist = FALSE;
			foreach ($pdt_anggota as $pdt_ang) {
				# code...
				if($ang->ang_pegawai == $pdt_ang->kode_pegawai){
					$is_exist = TRUE;
					break;
				}
			}
			if($is_exist){
				$this->m_pdt_anggota->insert($pdt->kode, $ang->ang_pegawai, $ang->ang_sebagai == 1 ? 1 : 0, false, $ang->ang_sebagai, now(), now());
			}
		}


		$this->load->model("m_log_admin");
		$this->m_log_admin->insert($this->auth->get_user_id(), now(), 'Verifikasi (Update) Data PDT',$pelacakan->judul);

		//ajax_response('ok');
	}

	private function update_pegawai($silacak_pegawai, $pdt_pegawai){
		$id_silacak = $silacak_pegawai->peg_id;
		$this->m_pegawai->update($id_silacak,
					$pdt_pegawai->kode_fakultas,
					$pdt_pegawai->kode_jurusan,
					$pdt_pegawai->kode_program_studi,
					$pdt_pegawai->kode_jenjang_pendidikan,
					FALSE,//$pdt_pegawai->kode_satuan_kerja,
					$pdt_pegawai->kode_ikatan_kerja_pegawai,
					$pdt_pegawai->kode_status_aktivitas_pegawai,
					FALSE,//$pdt_pegawai->kode_jenis_pegawai,
					FALSE,//$pdt_pegawai->kode_jenis_dosen,
					FALSE,//$pdt_pegawai->kode_pangkat_pns,
					$pdt_pegawai->kode_jenis_kelamin,
					$pdt_pegawai->kode_provinsi,
					$pdt_pegawai->kode_kota,
					FALSE,//$pdt_pegawai->kode_status_validasi,
					FALSE,//$pdt_pegawai->kode_log_audit,
					$pdt_pegawai->nip_baru,
					$pdt_pegawai->nip_lama,
					$pdt_pegawai->nidn,
					$pdt_pegawai->nama,
					$pdt_pegawai->gelar_akademik_depan,
					$pdt_pegawai->gelar_akademik_belakang,
					$pdt_pegawai->alamat,
					$pdt_pegawai->telepon,
					$pdt_pegawai->handphone,
					$pdt_pegawai->email,
					FALSE,
					FALSE,
					$pdt_pegawai->is_dosen,
					FALSE,
					FALSE,
					FALSE,
					FALSE,
					FALSE);

	}

	public function sinkron_pegawai()
	{
		$pdt_pegawai = $this->m_pdt_pegawai->get_data("kode_status_aktivitas_pegawai in ('A','DP','TB','TI','DK','DT','MP') and is_dosen=1 and kode_ikatan_kerja_pegawai in (1,2,3)");
		//$silacak_pegawai = $this->m_pegawai->get();
		$this->load->model("m_log_admin");
		$this->m_log_admin->insert(USER_SYSTEM, now(), 'Sinkronisasi Data Pegawai', "");
		foreach ($pdt_pegawai as $key => $value) {
			$silacak_pegawai = $this->m_pegawai->get("peg_nip_baru = '" . $value->nip_baru . "'");
			if(count($silacak_pegawai) > 0){
				//update data dosen silacak
				$this->update_pegawai($silacak_pegawai[0], $value);
			}
			else{
				$silacak_pegawai = $this->m_pegawai->get("peg_nip_lama = '" . $value->nip_lama . "'");
				if(count($silacak_pegawai) > 0){
					//update data dosen silacak
					$this->update_pegawai($silacak_pegawai[0], $value);
				}
				else{
					//insert dosen baru di silacak
					$this->m_pegawai->insert(
										$value->kode_fakultas,
										$value->kode_jurusan,
										$value->kode_program_studi,
										$value->kode_jenjang_pendidikan,
										FALSE,//$pdt_pegawai->kode_satuan_kerja,
										$value->kode_ikatan_kerja_pegawai,
										$value->kode_status_aktivitas_pegawai,
										FALSE,//$pdt_pegawai->kode_jenis_pegawai,
										FALSE,//$pdt_pegawai->kode_jenis_dosen,
										FALSE,//$pdt_pegawai->kode_pangkat_pns,
										$value->kode_jenis_kelamin,
										$value->kode_provinsi,
										$value->kode_kota,
										FALSE,//$pdt_pegawai->kode_status_validasi,
										FALSE,//$pdt_pegawai->kode_log_audit,
										$value->nip_baru,
										$value->nip_lama,
										$value->nidn,
										$value->nama,
										$value->gelar_akademik_depan,
										$value->gelar_akademik_belakang,
										$value->alamat,
										$value->telepon,
										$value->handphone,
										$value->email,
										FALSE,
										FALSE,
										$value->is_dosen,
										FALSE,
										FALSE,
										FALSE,
										FALSE,
										FALSE);
				}
			}
		}		
	}
}